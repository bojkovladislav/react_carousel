{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","currentSmileIndex","handleClick","step","props","images","frameSize","lastSmileIndex","length","nextSmileIndex","setState","this","smileWidth","speedOfAnimation","infinite","frameStyles","width","transition","smileStyles","transform","className","style","map","image","index","src","alt","type","onClick","disabled","Component","App","updateState","key","value","renderInputField","label","name","min","max","determineInputType","choice","htmlFor","toString","onChange","e","parsedValue","target","checked","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d254f235.chunk.js","sourcesContent":["import './Carousel.scss';\nimport { Component } from 'react';\n\ninterface Props {\n  images: string[];\n  smileWidth: number;\n  frameSize: number;\n  step: number;\n  speedOfAnimation: number;\n  infinite: boolean;\n}\n\ninterface State {\n  currentSmileIndex: number;\n}\n\nclass Carousel extends Component<Props, State> {\n  state: Readonly<State> = {\n    currentSmileIndex: 0,\n  };\n\n  handleClick = (step: number) => () => {\n    const { images, frameSize } = this.props;\n    const { currentSmileIndex } = this.state;\n    const lastSmileIndex = images.length - frameSize;\n    const firstSmileIndex = 0;\n    let nextSmileIndex = currentSmileIndex + step;\n\n    if (step > 0) {\n      if (currentSmileIndex === lastSmileIndex) {\n        nextSmileIndex = firstSmileIndex;\n      } else if (nextSmileIndex > lastSmileIndex) {\n        nextSmileIndex = lastSmileIndex;\n      }\n    }\n\n    if (step < 0) {\n      if (currentSmileIndex === firstSmileIndex) {\n        nextSmileIndex = lastSmileIndex;\n      } else if (nextSmileIndex < firstSmileIndex) {\n        nextSmileIndex = firstSmileIndex;\n      }\n    }\n\n    this.setState({ currentSmileIndex: nextSmileIndex });\n  };\n\n  render() {\n    const {\n      smileWidth,\n      frameSize,\n      speedOfAnimation,\n      infinite,\n      step,\n      images,\n    } = this.props;\n\n    const { currentSmileIndex } = this.state;\n\n    const frameStyles = {\n      width: `${frameSize * smileWidth}px`,\n      transition: `${speedOfAnimation}ms`,\n    };\n\n    const smileStyles = {\n      transform: `translateX(${-currentSmileIndex * smileWidth}px)`,\n      transition: `${speedOfAnimation}ms`,\n    };\n\n    return (\n      <div className=\"carousel\">\n        <div className=\"carousel__frame\" style={frameStyles}>\n          <ul className=\"carousel__list\">\n            {images.map((image, index) => {\n              return (\n                <li\n                  key={image}\n                  style={smileStyles}\n                >\n                  <img\n                    src={image}\n                    width={`${smileWidth}px`}\n                    alt={`smile ${index + 1}`}\n                  />\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            onClick={this.handleClick(-step)}\n            disabled={currentSmileIndex <= 0 && !infinite}\n            className=\"buttons__button\"\n          >\n            Prev\n          </button>\n\n          <button\n            type=\"button\"\n            onClick={this.handleClick(step)}\n            disabled={\n              (currentSmileIndex >= images.length - frameSize) && !infinite\n            }\n            className=\"buttons__button\"\n            data-cy=\"next\"\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n  smileWidth: number;\n  frameSize: number;\n  step: number;\n  speedOfAnimation: number;\n  infinite: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n\n    smileWidth: 130,\n    frameSize: 3,\n    step: 3,\n    speedOfAnimation: 1000,\n    infinite: false,\n  };\n\n  updateState = <K extends keyof State>(key: K, value: number | boolean) => {\n    this.setState({ [key]: value } as Pick<State, K>);\n  };\n\n  renderInputField = (\n    label: string,\n    name: string,\n    value: number | boolean,\n    min?: number,\n    max?: number,\n  ) => {\n    const determineInputType = (choice: string) => {\n      return typeof value === 'number' ? choice : 'checkbox';\n    };\n\n    return (\n      <label htmlFor={name} className=\"control-panel__label\">\n        {label}\n        <input\n          type={determineInputType('number')}\n          name={name}\n          value={value.toString()}\n          min={min}\n          max={max}\n          onChange={(e) => {\n            const parsedValue = typeof value === 'number'\n              ? +e.target.value\n              : e.target.checked;\n\n            this.updateState(name as keyof State, parsedValue);\n          }}\n          className={`control-panel__${determineInputType('input')}`}\n        />\n      </label>\n    );\n  };\n\n  render() {\n    const {\n      images,\n      smileWidth,\n      step,\n      frameSize,\n      speedOfAnimation,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"carousel__title\" data-cy=\"title\">\n          Carousel with\n          {' '}\n          {images.length}\n          {' '}\n          images\n        </h1>\n\n        <Carousel\n          images={images}\n          smileWidth={smileWidth}\n          frameSize={frameSize}\n          step={step}\n          speedOfAnimation={speedOfAnimation}\n          infinite={infinite}\n        />\n\n        <div className=\"control-panel\">\n          {this.renderInputField(\n            'Item width',\n            'smileWidth',\n            smileWidth,\n            130,\n          )}\n\n          {this.renderInputField(\n            'Frame size',\n            'frameSize',\n            frameSize,\n            1,\n            10,\n          )}\n\n          {this.renderInputField(\n            'Step',\n            'step',\n            step,\n            1,\n            10,\n          )}\n\n          {this.renderInputField(\n            'Speed of an animation',\n            'speedOfAnimation',\n            speedOfAnimation,\n            1,\n          )}\n\n          {this.renderInputField(\n            'Infinite',\n            'infinite',\n            infinite,\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}